name: Twitch Bot CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3. Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Run Black Formatter Check using a GitHub Action
      - name: Run Black Formatter Check
        uses: psf/black@stable
        with:
          args: --check --diff . --line-length 120

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Deploy to Raspberry Pi via SSH
      - name: Deploy to Raspberry Pi via SSH
        uses: appleboy/ssh-action@v0.1.5
        env:  # Corrected from 'envs:' to 'env:'
          TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
          TWITCH_CLIENT_SECRET: ${{ secrets.TWITCH_CLIENT_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          DATABASE_ENCRYPTION_KEY: ${{ secrets.DATABASE_ENCRYPTION_KEY }}
          DATABASE_PATH: ${{ secrets.DATABASE_PATH }}
          BACKUP_DIR: ${{ secrets.BACKUP_DIR }}
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USERNAME }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}    # Optional, defaults to 22
          script: |
            REVUBOT_DIR=~/revbot
            REPO_URL=https://github.com/Revulate/revbot.git  # Ensure this is your correct repository URL

            # Create revbot directory if it doesn't exist
            mkdir -p $REVUBOT_DIR
            cd $REVUBOT_DIR

            # If .git exists, pull; else, clone the repository
            if [ -d ".git" ]; then
              git fetch origin
              git checkout main
              git pull origin main
            else
              git clone --branch main $REPO_URL .
            fi

            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate the virtual environment
            source venv/bin/activate

            # Upgrade pip within the virtual environment
            python -m pip install --upgrade pip

            # Install dependencies within the virtual environment
            pip install -r requirements.txt

            # Create or update the .env file
            cat <<EOF > .env
            TWITCH_CLIENT_ID=$TWITCH_CLIENT_ID
            TWITCH_CLIENT_SECRET=$TWITCH_CLIENT_SECRET
            ACCESS_TOKEN=$ACCESS_TOKEN
            DATABASE_ENCRYPTION_KEY=$DATABASE_ENCRYPTION_KEY
            DATABASE_PATH=$DATABASE_PATH
            BACKUP_DIR=$BACKUP_DIR
            EOF

            # Restart the Twitch bot service
            sudo systemctl restart twitch-bot.service
