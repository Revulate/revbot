name: Twitch Bot CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black Formatter Check
        run: |
          pip install black
          python -m black --check --diff --line-length 120 .

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "TWITCH_CLIENT_ID=${{ secrets.TWITCH_CLIENT_ID }}" >> .env
          echo "TWITCH_CLIENT_SECRET=${{ secrets.TWITCH_CLIENT_SECRET }}" >> .env
          echo "ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }}" >> .env
          echo "REFRESH_TOKEN=${{ secrets.REFRESH_TOKEN }}" >> .env
          echo "BOT_NICK=${{ secrets.BOT_NICK }}" >> .env
          echo "TWITCH_CHANNELS=${{ secrets.TWITCH_CHANNELS }}" >> .env
          echo "COMMAND_PREFIX=${{ secrets.COMMAND_PREFIX }}" >> .env
          echo "ADMIN_USERS=${{ secrets.ADMIN_USERS }}" >> .env
          echo "BOT_USER_ID=${{ secrets.BOT_USER_ID }}" >> .env
          echo "BROADCASTER_USER_ID=${{ secrets.BROADCASTER_USER_ID }}" >> .env
          echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env
          echo "LOG_FILE=${{ secrets.LOG_FILE }}" >> .env
          echo "LOG_MAX_BYTES=${{ secrets.LOG_MAX_BYTES }}" >> .env
          echo "LOG_BACKUP_COUNT=${{ secrets.LOG_BACKUP_COUNT }}" >> .env
          echo "API_STEAM_KEY=${{ secrets.API_STEAM_KEY }}" >> .env
          echo "LOGDNA_INGESTION_KEY=${{ secrets.LOGDNA_INGESTION_KEY }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> .env
          echo "NUULS_API_KEY=${{ secrets.NUULS_API_KEY }}" >> .env

      - name: Deploy to Raspberry Pi
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.RPI_HOST }}
          username: ${{ secrets.RPI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          script: |
            REVUBOT_DIR=~/revbot
            REPO_URL=https://github.com/Revulate/revbot.git

            # Create revbot directory if it doesn't exist
            mkdir -p $REVUBOT_DIR
            cd $REVUBOT_DIR

            # If .git exists, pull; else, clone the repository
            if [ -d ".git" ]; then
              git fetch origin
              git checkout main
              git pull origin main
            else
              git clone --branch main $REPO_URL .
            fi

            # Use the existing virtual environment or create one if necessary
            if [ ! -d "venv" ]; then
              python3.11 -m venv venv  # Adjust to python3.10 if necessary
            fi

            # Activate the virtual environment
            source venv/bin/activate

            # Install dependencies within the virtual environment
            pip install -r requirements.txt

      - name: Copy .env file to Raspberry Pi
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.RPI_HOST }}
          username: ${{ secrets.RPI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          source: ".env"
          target: "~/revbot"

      - name: Restart Twitch Bot Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.RPI_HOST }}
          username: ${{ secrets.RPI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          script: |
            sudo systemctl restart twitch-bot.service